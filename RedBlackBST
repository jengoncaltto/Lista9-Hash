public class RedBlackBST<Key extends Comparable<Key>, Value> {
    private RedBlackNode<Key, Value> root;

    private static final boolean RED   = true;
    private static final boolean BLACK = false;

    // Método de rotação à esquerda
    private RedBlackNode<Key, Value> rotateLeft(RedBlackNode<Key, Value> h) {
        RedBlackNode<Key, Value> x = h.right;
        h.right = x.left;
        x.left = h;
        x.color = h.color;
        h.color = RED;
        return x;
    }

    // Método de rotação à direita
    private RedBlackNode<Key, Value> rotateRight(RedBlackNode<Key, Value> h) {
        RedBlackNode<Key, Value> x = h.left;
        h.left = x.right;
        x.right = h;
        x.color = h.color;
        h.color = RED;
        return x;
    }

    // Método de balanceamento
    private void flipColors(RedBlackNode<Key, Value> h) {
        h.color = RED;
        h.left.color = BLACK;
        h.right.color = BLACK;
    }

    // Inserção na árvore rubro-negra
    public void put(Key key, Value value) {
        root = put(root, key, value);
        root.color = BLACK;
    }

    private RedBlackNode<Key, Value> put(RedBlackNode<Key, Value> h, Key key, Value value) {
        if (h == null) return new RedBlackNode<>(key, value);

        int cmp = key.compareTo(h.key);
        if (cmp < 0) h.left = put(h.left, key, value);
        else if (cmp > 0) h.right = put(h.right, key, value);
        else h.value = value;

        // Balanceamento após inserção
        if (isRed(h.right) && !isRed(h.left)) h = rotateLeft(h);
        if (isRed(h.left) && isRed(h.left.left)) h = rotateRight(h);
        if (isRed(h.left) && isRed(h.right)) flipColors(h);

        return h;
    }

    private boolean isRed(RedBlackNode<Key, Value> x) {
        if (x == null) return false;
        return x.color == RED;
    }
}
